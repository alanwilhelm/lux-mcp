//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "synthesis_states")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub session_id: Uuid,
    pub version: i32,
    pub step_number: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub current_understanding: Option<String>,
    #[sea_orm(column_type = "Float")]
    pub confidence_score: f32,
    #[sea_orm(column_type = "Float")]
    pub clarity_score: f32,
    pub created_at: DateTimeWithTimeZone,
    #[sea_orm(column_type = "Text", nullable)]
    pub raw_update_call: Option<String>,
    #[sea_orm(column_type = "JsonBinary")]
    pub parsed_data: Json,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::action_items::Entity")]
    ActionItems,
    #[sea_orm(has_many = "super::insights::Entity")]
    Insights,
    #[sea_orm(
        belongs_to = "super::sessions::Entity",
        from = "Column::SessionId",
        to = "super::sessions::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Sessions,
}

impl Related<super::action_items::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ActionItems.def()
    }
}

impl Related<super::insights::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Insights.def()
    }
}

impl Related<super::sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sessions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
