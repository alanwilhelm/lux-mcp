//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "sessions")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub session_type: String,
    #[sea_orm(unique)]
    pub session_external_id: String,
    #[sea_orm(column_type = "Text")]
    pub query: String,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub completed_at: Option<DateTimeWithTimeZone>,
    pub status: String,
    #[sea_orm(column_type = "JsonBinary")]
    pub metadata: Json,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::bias_detections::Entity")]
    BiasDetections,
    #[sea_orm(has_many = "super::reasoning_steps::Entity")]
    ReasoningSteps,
    #[sea_orm(has_many = "super::session_models::Entity")]
    SessionModels,
    #[sea_orm(has_many = "super::synthesis_states::Entity")]
    SynthesisStates,
}

impl Related<super::bias_detections::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BiasDetections.def()
    }
}

impl Related<super::reasoning_steps::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ReasoningSteps.def()
    }
}

impl Related<super::session_models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SessionModels.def()
    }
}

impl Related<super::synthesis_states::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SynthesisStates.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
