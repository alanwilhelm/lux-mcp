//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "action_items")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub synthesis_state_id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub action_text: String,
    pub priority: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub rationale: Option<String>,
    pub dependencies: Option<Vec<String>>,
    pub created_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::synthesis_states::Entity",
        from = "Column::SynthesisStateId",
        to = "super::synthesis_states::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    SynthesisStates,
}

impl Related<super::synthesis_states::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SynthesisStates.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
